#!/usr/bin/perl

$datadir = "testdata";

sub fpath {
	return $datadir . '/' . $_[0];
}

$dictname = fpath("test.dict");
$dumpname = fpath("test.dump");
$idxname = fpath("test.idx");

$n = 5000;

$maxword = 10;
$maxwords = 5;
$maxdefs = 10;

@letters = ('a'..'z', 'A'..'Z');

-d $datadir or mkdir($datadir) or die $!;

open(DICT, ">", $dictname) or die $!;

sub randletter {
	return $letters[int(rand($#letters))];
}

sub randword
{
	my $len = int(rand($maxword));
	return join("", map(randletter, (1..$len)));
}

sub randphrase
{
	my $len = int(rand($maxwords));
	return join(" ", map(randword, (1..$len)));
}

sub randdef
{
	my $len = int(rand($maxdefs));
	return "/" . join("/", map(randphrase, (1..$len))) . "/";
}

sub randentry {
	my ($format) = @_;

	@arglist = (randword(), randword(), randdef());
	printf DICT ($format, @arglist);
}

foreach (1..$n) {
	randentry("%s\n");
	randentry("%s \n");
	randentry("%s %s\n");
	randentry("%s %s %s\n");
	randentry("%s [%s] %s\n");
	randentry("%s [ %s ] %s\n");
	randentry("%s [%s %s\n");
	randentry("%s %s] %s\n");
}

`./parser $dictname 1 > $dumpname.kanji`;
`./parser $dictname 2 > $dumpname.kana`;
`./parser $dictname 3 > $dumpname.english`;

`./build $dictname $idxname.kanji 1`;
`./build $dictname $idxname.kana 2`;
`./build $dictname $idxname.english 3`;

`./verify $dictname $idxname.kanji 1`;
`./verify $dictname $idxname.kana 2`;
`./verify $dictname $idxname.english 3`;
